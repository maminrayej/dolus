package dolus.base;


import java.util.ArrayList;
import java.util.HashMap;

/**
 * This class manages HashMapBasedQueryRecords
 *
 * @author m.amin rayej
 * @version 1.0
 * @since 1.0
 */
public class HashMapBasedQueryTreeRecordManager extends QueryTreeRecordManager<String,String> {

    /**
     * Adds a new record to the query activation tree record.
     *
     * @since 1.0
     */
    @Override
    public void addRecord(){

        //if it's the first record, initialize the query activation tree
        if (isEmpty()) {

            //set the new created record to be the root of query activation tree
            setRoot(new HashMapBasedQueryTreeRecord());

            //set record pointer to root
            setCurrent(getRoot());

            //declare that record manager is no longer empty
            setEmpty(false);

            //push a child access index for the new added record
            pushChildIndex();

            return;
        }

        //create a new record and set its parent to the current record
        HashMapBasedQueryTreeRecord current = (HashMapBasedQueryTreeRecord) super.getCurrent();
        HashMapBasedQueryTreeRecord record = new HashMapBasedQueryTreeRecord(current);

        //add created record as a child to the current record
        current.addChild(record);

        //update the record pointer
        setCurrent(record);

        //push a child access index for the new added record
        pushChildIndex();

        //update current depth of the record manager
        setDepth(getDepth()+1);

    }

    /**
     * Maps an alias.attribute to a generated_alias.attribute. and
     * Maps and table_name to "generated_table_name generated_alias"
     *
     * @param alias is used to find the record in the query activation tree to add the generated values in it
     * @param aliasAttribute alias.attribute that used in the original query
     * @param generatedAliasAttribute generated_alias.attribute that generated by Dolus
     * @param tableName name of the table in the original query
     * @param generatedTableName generated table related to the table mentioned by table name
     * @return true if mapping was successful
     * @since 1.0
     */
    public boolean addGeneratedAliases(String alias, String aliasAttribute, String generatedAliasAttribute, String tableName, String generatedTableName){

        //find the query record that contains the alias
        HashMapBasedQueryTreeRecord record = findRecordContainingAlias(alias);

        //there was no record containing the alias in its symbol table
        if (record == null)
            return false;

        //add the mapping to the record containing the alias
        record.addGeneratedAliasAttribute(aliasAttribute, generatedAliasAttribute);

        record.addGeneratedTableName(tableName, generatedTableName);

        return true;
    }

    /**
     * Get the alias.attribute generated for the original alias.attribute used in the query
     *
     * @param aliasAttribute original alias attribute
     * @return generated_alias.attribute, null if there is no generated alias for the specified alias.attribute
     */
    public String getGeneratedAliasAttribute(String aliasAttribute){

        //split the alias.attribute to [alias, attribute] and get alias
        String alias = aliasAttribute.split("\\.",2)[0];

        //find the query record that contains the alias
        HashMapBasedQueryTreeRecord record = findRecordContainingAlias(alias);

        //there was no record containing the alias in its symbol table
        if (record == null)
            return null;

        return record.getGeneratedAliasAttribute(aliasAttribute);

    }

    /**
     * Get the list of tables generated for the table specified by table name
     *
     * @param tableName name of the table in the original query
     * @return list of tables generated for the table specified by table name
     */
    public ArrayList<String> getGeneratedTableNames(String tableName){

        HashMapBasedQueryTreeRecord current = (HashMapBasedQueryTreeRecord) super.getCurrent();

        return current.getGeneratedTableNames(tableName);
    }

    /**
     * Finds the record that contains the alias in its symbol table.
     * It asks the current record for that alias.
     * If not found it asks the parent of the current record thus begins a recursive search up to the root
     *
     * @param alias alias name
     * @return the record containing the alias in its symbol table, null if there is no record containing the alias
     */
    private HashMapBasedQueryTreeRecord findRecordContainingAlias(String alias){

        //find the query record that contains the alias
        HashMapBasedQueryTreeRecord current = (HashMapBasedQueryTreeRecord) super.getCurrent();
        while (current != null){

            String result = current.findValue(alias);

            //found the record that contains the alias
            if (result != null)
                break;

            //move up in the query activation tree
            current = (HashMapBasedQueryTreeRecord) current.getPrevious();
        }

        return current;
    }

    /**
     * Get generated tables in the current active query
     *
     * @return generated tables in the current active query
     * @since 1.0
     */
    public HashMap<String, ArrayList<String>> getGeneratedTableNamesMap() {
        return ((HashMapBasedQueryTreeRecord) getCurrent()).getGeneratedTableNamesMap();
    }

}
